// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // postgresql://postgres:hor123@localhost:5432/cloud_demo
  // url      = "postgresql://postgres:hor123@localhost:5432/cloud_demo"
  //url      = env("DATABASE_URL_LOCAL")
  url      = env("DATABASE_URL_DOCKER")
}

enum RoleEnum {
  ADMIN
  USER
  EMPLOYEE
}

enum GenderEnum {
  MALE
  FEMALE
}

enum SeatStatusEnum {
  AVAILABLE
  SELECTED
  OWNED
}

enum MovieStatusEnum {
  COMING_SOON
  NOW_SHOWING
}

enum MovieTypeEnum {
  ACTION
  COMEDY
  HORROR
  DRAMA
  ANIMATION
  ADVANTURE
}

enum ScreeningStatusEnum {
  COMING_SOON
  NOW_SHOWING
  END_SHOWING
}

enum PaymentMethodEnum {
  ABA
  PAYPAL
  ACLEDA
  PHILIP
}

model Campus {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  address     String
  phone       String
  map         String?
  auditoriums Auditorium[]
  Screening   Screening[]
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  name         String?
  gender       GenderEnum
  password     String
  role         RoleEnum       @default(USER)
  enable       Boolean        @default(true)
  bookings     Booking[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime?      @updatedAt
  RefreshToken RefreshToken[]
}

model Movie {
  id           Int             @id @default(autoincrement())
  title        String          @unique
  image        String?
  trailer      String?
  sub_title    String?         @default("EN/KH")
  movieType    MovieTypeEnum   @default(ACTION)
  description  String?
  duration_min Int
  opening_date DateTime?
  rating       Float
  price        Float?
  status       MovieStatusEnum
  isTop        Boolean         @default(true)
  isDisable    Boolean         @default(false)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime?       @updatedAt
  Screening    Screening[]
}

model Auditorium {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  num_seats   Int
  isAvailable Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt
  seats       Seat[]
  Screening   Screening[]
  Campus      Campus?     @relation(fields: [campusId], references: [id])
  campusId    Int?
}

model Screening {
  id           Int                 @id @default(autoincrement())
  movie        Movie               @relation(fields: [movieId], references: [id], onDelete: Cascade)
  auditorium   Auditorium?         @relation(fields: [auditoriumId], references: [id], onDelete: SetNull)
  campus       Campus              @relation(fields: [campusId], references: [id])
  campusId     Int
  movieId      Int
  auditoriumId Int?
  date_show    DateTime
  duration_min Int
  startTime    DateTime            @db.Time
  endTime      DateTime?           @db.Time
  status       ScreeningStatusEnum @default(COMING_SOON)
  isAvailable  Boolean             @default(true)
  Ticket       Ticket[]
  Booking      Booking[]
  Seat         Seat[]
  createdAt    DateTime            @default(now())
  updatedAt    DateTime?           @updatedAt
}

model Ticket {
  id          Int       @id @default(autoincrement())
  customId    String?   @unique
  screening   Screening @relation(fields: [screeningId], references: [id])
  screeningId Int
  Seat        Seat?     @relation(fields: [seatId], references: [id])
  seatId      Int?
  price       Float
  active      Boolean
  payStatus   Boolean   @default(false)
  bookingId   Int?
  booking     Booking?  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model Booking {
  id          Int       @id @default(autoincrement())
  customId    String?
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  screening   Screening @relation(fields: [screeningId], references: [id])
  screeningId Int
  num         Int
  price_for_1 Int
  total       Int?
  tickets     Ticket[]

  purchase   Purchase? @relation(fields: [purchaseId], references: [id])
  purchaseId Int?
  payStatus  Boolean   @default(false)
  createAt   DateTime  @default(now())
}

model Seat {
  id           Int            @id @default(autoincrement())
  customId     String?
  Auditorium   Auditorium?    @relation(fields: [auditoriumId], references: [id])
  status       SeatStatusEnum @default(AVAILABLE)
  auditoriumId Int?
  screening    Screening?     @relation(fields: [screeningId], references: [id], onDelete: Cascade)
  Ticket       Ticket[]
  screeningId  Int
}

model Purchase {
  id            Int               @id @default(autoincrement())
  // bookId        Int[] // Array of booking's id
  total         Float
  paid          Boolean           @default(true)
  phoneNumber   String
  payMentMethod PaymentMethodEnum @default(PAYPAL)
  remark        String?
  bookings      Booking[]
}
